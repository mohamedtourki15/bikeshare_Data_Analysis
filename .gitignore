import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.
    Args:
        None.
    Returns:
        str (city): name of the city to analyze
        str (month): name of the month to filter by, or "all" to apply no month filter
        str (day): name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    
    # An empty city variable to store city choice from user
    
    city = ''
    
    while city not in CITY_DATA.keys():
        print("\nWhich city would you like to see data for:")
        
        print("\n1. Chicago 2. New York City 3. Washington")
        
        city = input().lower()

        if city not in CITY_DATA.keys():
            print("\nPlease check your input.")


    # Creating a dictionary to store all the months including the 'all' option
    
    MONTH_DATA = {'january': 1, 'february': 2, 'march': 3, 'april': 4, 'may': 5, 'june': 6, 'all': 7}
    
    # An empty month variable to store month choice from user
    
    month = ''
    
    while month not in MONTH_DATA.keys():
        print("\nPlease enter the month, between January to June:")
        
        print("\n(please type 'all' or 'All' or 'ALL' to view data for all months.)")
        
        month = input().lower()

        if month not in MONTH_DATA.keys():
            print("\nInvalid input. Please try again.")

    # Creating a list to store all the days including the 'all' option
    
    DAY_LIST = ['all', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
    
    # An empty day variable to store day choice from user
    
    day = ''
    
    while day not in DAY_LIST:
        print("\nPlease enter a day in the week to filter the data with:")
        
        print("\n(please type 'all' or 'All' or 'ALL' to view data for all days in a week.)")
        
        day = input().lower()

        if day not in DAY_LIST:
            print("\nInvalid input. Please try again.")

    print(f"\nYou have chosen to view data for city: {city.upper()}, month/s: {month.upper()} and day/s: {day.upper()}.")
    
    print('<>'*40)
    
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.
    Args:
         (str): name of the city to analyze
         (str): name of the month to filter by, or "all" to apply no month filter
         (str): name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df: Pandas DataFrame containing city data filtered by month and day
    """
    print("\nLoading data...")
    
    df = pd.read_csv(CITY_DATA[city])

    # Convert the Start Time column to datetime
    df['Start Time'] = pd.to_datetime(df['Start Time'])

    # Extract month and day of week from Start Time to create new columns
    df['month'] = df['Start Time'].dt.month
    
    df['day_of_week'] = df['Start Time'].dt.day_name()

    # Filter by month if applicable
    if month != 'all':
        # Use the index of the months list to get the corresponding int
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        
        month = months.index(month) + 1

        # Filter by month to create the new dataframe
        df = df[df['month'] == month]

    # Filter by day of week if applicable
    if day != 'all':
        #Filter by day of week to create the new dataframe
        df = df[df['day_of_week'] == day.title()]

    return df

def time_stats(df):
    """Displays statistics on the most frequent times of travel.
    Args:
        (df): The data frame the user wish to work with.
    Returns:
        None.
    """

    print('\nCalculating The Most Frequent Times of Travel...\n')
    
    start_time = time.time()

    common_month = df['month'].mode()[0]

    print(f"Most Popular Month :\t{common_month}")

    common_day = df['day_of_week'].mode()[0]

    print(f"\nMost Popular Day:\t{common_day}")

    df['hour'] = df['Start Time'].dt.hour

    common_hour = df['hour'].mode()[0]

    print(f"\nMost Popular Start Hour:\t{common_hour}")
    
    
    print(f"\nThis took {(time.time() - start_time)} seconds.")
    
    print('<>'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip.
    Args:
        (df): The data frame the user wish to work with.
    Returns:
        None.
    """

    print('\nCalculating The Most Popular Stations and Trip...\n')
    
    start_time = time.time()

    
    common_start_station = df['Start Station'].mode()[0]

    print(f"The most commonly used start station:\n\n{common_start_station}")

    
    common_end_station = df['End Station'].mode()[0]

    print(f"\nThe most commonly used end station:\n\n{common_end_station}")

    # Uses mode on this new column to find out the most common combination of start and end stations
    df['Start To End'] = df['Start Station'] + '\tto\t' + df['End Station']
    
    start_to_end = df['Start To End'].mode()[0]

    print(f"\nThe most frequent combination of trips are from:\n\n{start_to_end}.")

    print(f"\nThis took {(time.time() - start_time)} seconds.")
    
    print('<>'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration.
    Args:
        (df): The data frame the user wish to work with.
    Returns:
        None.
    """

    print('\nCalculating Trip Duration...\n')
    
    start_time = time.time()

    # Uses sum method to calculate the total trip duration
    total_duration = df['Trip Duration'].sum()
    
    # Finds out the duration in minutes and seconds format
    minute, second = divmod(total_duration, 60)
    
    # Finds out the duration in hour and minutes format
    hour, minute = divmod(minute, 60)
    
    print(f"The total trip duration is: \n\n{hour} hours, {minute} minutes and {second} seconds.")

    # Calculating the average trip duration using mean method
    average_duration = round(df['Trip Duration'].mean())
    
    # Finds the average duration in minutes and seconds format
    mins, sec = divmod(average_duration, 60)
    
    # if the mins exceed 60 This filter prints the time in hours, mins, sec format
    if mins > 60:
        hrs, mins = divmod(mins, 60)
        
        print(f"\nThe average trip duration is: \n\n{hrs} hours, {mins} minutes and {sec} seconds.")
    else:
        print(f"\nThe average trip duration is: \n\n{mins} minutes and {sec} seconds.")

    print(f"\nThis took {(time.time() - start_time)} seconds.")
    
    print('<>'*40)

    
def user_stats(df):
    """Displays statistics on bikeshare users.
    Args:
        (df): The data frame the user wish to work with.
    Returns:
        None.
    """

    print('\nCalculating User Stats...\n')
    
    start_time = time.time()

    
    user_type = df['User Type'].value_counts()

    print(f"The types of users by number are :\n\n{user_type}")

    # This if statment is implemented to display the numebr of users by Gender
    # but, not every df may have the 'Gender' column.
    if "Gender" in df.columns:
        user_gender = df['Gender'].value_counts()
        
        print(f"\nThe types of users by gender are :\n\n{user_gender}")
    else:
        print("\nThere is no 'Gender' column in this file.")

    # The earliest birth year, most recent birth year and the most common
    # birth years are displayed below
    # This try clause is implemented to display The earliest birth year, most recent birth year and the most common
    # birth years but, not every df may have the 'birth year' column.
    try:
        earliest_birth_year = int(df['Birth Year'].min())
        
        recent_birth_year = int(df['Birth Year'].max())
        
        common_birth_year = int(df['Birth Year'].mode()[0])
        
        print(f"\nThe earliest year of birth: {earliest_birth_year}\n\nThe most recent year of birth: {recent_birth_year}\n\nThe most common year of birth {common_birth_year}")
    except:
        print("There is no 'birth year' column in this file.")

    print(f"\nThis took {(time.time() - start_time)} seconds.")
    
    print('<>'*40)


def display_raw_data(df):
    """Displays 5 rows of data from the csv file for the selected city.
    Args:
         (df): The data frame the user wish to work with.
    Returns:
        None.
    """
    raw_data_view = ['yes', 'no']
    
    data = ''
    
    counter = 0
    
    while data not in raw_data_view:
        print("\nDo you wish to view the raw data?, print[\'yes\'or\'no\']")
        
        data = input().lower()
        
        if data == "yes":
            print(df.head())
            
        elif data not in raw_data_view:
            print("\nPlease check your input.")

    while data == 'yes':
        print("Do you wish to view more raw data?")
        
        counter += 5
        
        data = input().lower()
        
        # this displays the next 5 rows of data, if the user input is 'yes'
        if data == "yes":
             print(df[counter:counter+5])
                
        elif data != "yes":
             break


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)
        display_raw_data(df)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()
    
